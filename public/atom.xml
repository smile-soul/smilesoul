<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smilesoul</title>
  <subtitle>Smilesoul Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://smilesoul.cn/"/>
  <updated>2017-10-09T00:56:44.079Z</updated>
  <id>http://smilesoul.cn/</id>
  
  <author>
    <name>Smilesoul</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web最佳实践阅读总结(2)</title>
    <link href="http://smilesoul.cn/2017/10/09/Web%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93-2/"/>
    <id>http://smilesoul.cn/2017/10/09/Web最佳实践阅读总结-2/</id>
    <published>2017-10-09T00:28:41.000Z</published>
    <updated>2017-10-09T00:56:44.079Z</updated>
    
    <content type="html"><![CDATA[<h5 id="代码符合标准"><a href="#代码符合标准" class="headerlink" title="代码符合标准"></a>代码符合标准</h5><ul><li>标准的页面会保证正确的渲染</li><li>页面容易被搜索引擎搜索，提高搜索排名(SEO)</li><li>提高网站的易用性</li><li>网页更好维护和扩展（Validator，HTML Validator 属于Firefox插件)</li></ul><h5 id="停止使用不标准的标签和属性，简化HTML代码"><a href="#停止使用不标准的标签和属性，简化HTML代码" class="headerlink" title="停止使用不标准的标签和属性，简化HTML代码"></a>停止使用不标准的标签和属性，简化HTML代码</h5><ul><li>标签没有实际意义，仅设置样式（不推荐使用）</li><li>不推荐使用blink，marquee</li><li>让HTML拥有更好的语义</li><li>移除不常用的HTML标签</li></ul><h5 id="样式和结构分离"><a href="#样式和结构分离" class="headerlink" title="样式和结构分离"></a>样式和结构分离</h5><ul><li>HTML页面链接一个CSS（最优），提高加载速度</li><li>HTML内嵌CSS（单一页面最佳，减少加载CSS样式文件的请求数目，加快加载速度</li><li>内联CSS样式，可以使用JS动态来统一修改，很少使用，JQ中使用其实现动画效果</li><li>在CSS样式文件中引用CSS文件，避免使用</li></ul><h5 id="添加JS禁用提示信息"><a href="#添加JS禁用提示信息" class="headerlink" title="添加JS禁用提示信息"></a>添加JS禁用提示信息</h5><ul><li>使用noscrpt，HTML4只在body中起作用，HTML5中可以出现在head中，支持HTML，不支持XHTML</li><li>最好使用noscript，采用渐进增强的模式，平稳降级</li></ul><h5 id="添加必要的meta的标签"><a href="#添加必要的meta的标签" class="headerlink" title="添加必要的meta的标签"></a>添加必要的meta的标签</h5><ul><li>meta的属性：name，http-equiv，content，charset</li><li>name和content属性组合，构成名称/值对</li><li>name中keywords，description最常用</li><li>http-equiv和content属性结合，构成http命令</li><li>其中content-type，default-style，refresh已经确定，content-language，set-cookie 未正式确定</li><li>charset设置编码</li></ul><h5 id="常用的meta方法"><a href="#常用的meta方法" class="headerlink" title="常用的meta方法"></a>常用的meta方法</h5><ul><li>设置IE浏览器的兼容性</li><li>设置页面在移动设备中的显示</li><li>设置IE浏览器的固定网站功能</li></ul><h5 id="HTML语义化"><a href="#HTML语义化" class="headerlink" title="HTML语义化"></a>HTML语义化</h5><ul><li>语义化使搜索引擎和第三方抓取工具更容易读懂代码</li><li>去掉CSS也可以保持良好的外观</li><li>div，span尽量少使用</li><li>把无关的元素重HTML中删除</li><li>添加一些隐藏文字</li><li>要求：<ul><li>熟悉所有规范中的HTML标签，理解各标签的语义</li><li>熟悉各标签上规范的属性，给HTML标签设置必要的属性</li><li>样式和结构的分离</li></ul></li><li>构建页面标题的最佳实践：<ul><li>使用hx标签</li><li>页面只是使用一个h1</li><li>hx使用过程中不要跳级</li><li>不要使用hx设置样式</li></ul></li><li>设计表单：<ul><li>使用label标签，并设置label标签的for属性</li><li>给输入控件设置合适的水印提示</li><li>输入控件设置tab顺序</li><li>使用HTML5中引入的表单控件</li></ul></li></ul><h5 id="HTML5新特性使用"><a href="#HTML5新特性使用" class="headerlink" title="HTML5新特性使用"></a>HTML5新特性使用</h5><ul><li>async和defer属性<ul><li>不使用在内联里面</li><li>defer：以并行的方式下载脚本，而不是阻塞的方式下载，在脚本加载完成后，浏览器会在DOM触发之前按照引用顺序运行JS</li><li>async：以异步的方式下载脚本，在下载结束后立即执行代码，而不会等待页面解析结束</li><li>在设置async时候，推荐同时设置defer属性，提高脚本加载执行的性能</li></ul></li><li>标签上的自定义属性data-*</li><li>script可以编写HTML模板和XML数据</li></ul><h5 id="选择器注意"><a href="#选择器注意" class="headerlink" title="选择器注意"></a>选择器注意</h5><ul><li>尽量不使用ID选择器</li><li>减少子选择器的层级（less和Sass的滥用）</li><li>使用组合CSS类选择器</li></ul><h5 id="兼容IE浏览器"><a href="#兼容IE浏览器" class="headerlink" title="兼容IE浏览器"></a>兼容IE浏览器</h5><ul><li>兼容旧浏览器的代码，被称为hack代码</li><li>熟悉IE浏览器中常见的兼容样式</li><li><p>分离样式兼容代码</p>  <figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.color</span>&#123; _color:green;&#125;  ( IE6 (含 IE6 ) 以下)</div><div class="line">        </div><div class="line"><span class="selector-class">.color</span>&#123; *<span class="attribute">color</span>:gray; &#125;  ( IE7 ( 含 IE7 )以下)</div><div class="line">        </div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:green \<span class="number">0</span>; &#125; ( IE8 + )</div><div class="line">    </div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:green \ ; &#125;   ( IE8 . IE9 )</div><div class="line">        </div><div class="line">:root <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:green \<span class="number">0</span>; &#125; ( IE9 + )</div><div class="line">        </div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:green \<span class="number">9</span>\<span class="number">0</span>; &#125;   ( IE9+ )</div><div class="line">        </div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:green \<span class="number">9</span>; &#125;   ( IE10 ( 含 IE10 ) 以下 )</div><div class="line">        </div><div class="line">*::-ms-backdrop, .color&#123; color:red; &#125;   ( IE11 )</div><div class="line">        </div><div class="line">* <span class="selector-tag">html</span> <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: red; &#125; (IE6 ONLY )</div><div class="line">        </div><div class="line">*+<span class="selector-tag">html</span> <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: red; &#125; ( IE7 ONLY )</div><div class="line">        </div><div class="line">@<span class="keyword">media</span> screen\<span class="number">9</span> &#123; </div><div class="line">        <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125; </div><div class="line">        &#125;  ( IE6 . IE7 )      </div><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen &#123;</div><div class="line">         <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125; </div><div class="line">        &#125;  ( IE8 ONLY )      </div><div class="line">@<span class="keyword">media</span> \<span class="number">0s</span>creen, screen\<span class="number">9</span> &#123;</div><div class="line">         <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125; </div><div class="line">        &#125; ( IE6 . IE7 . IE8 ) </div><div class="line">@<span class="keyword">media</span> screen\<span class="number">0</span> &#123;</div><div class="line">         <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125; </div><div class="line">        &#125;  ( IE8 . IE9 . IE10 )</div><div class="line">        @<span class="keyword">media</span> screen and (min-width: 0\<span class="number">0</span>) &#123;</div><div class="line">         <span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125;</div><div class="line">        &#125;  ( IE9 . IE10 )</div><div class="line">        </div><div class="line"></div><div class="line">@<span class="keyword">media</span> screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123; </div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>: black; &#125;</div><div class="line">&#125;   ( IE10 ONLY )</div><div class="line"></div><div class="line">@<span class="keyword">media</span> all and (-ms-high-contrast:none)&#123;</div><div class="line"><span class="selector-class">.color</span> &#123; <span class="attribute">color</span>:greeny \<span class="number">0</span>; &#125;</div><div class="line">&#125; ( IE10 + )</div><div class="line"></div><div class="line">@<span class="keyword">media</span> all and (-ms-high-contrast:none)&#123; </div><div class="line">*::-ms-backdrop, .color &#123; color:green \<span class="number">0</span>; &#125;</div><div class="line"> &#125; ( IE11 + )</div></pre></td></tr></table></figure></li></ul><h5 id="em，px，"><a href="#em，px，" class="headerlink" title="em，px，%"></a>em，px，%</h5><ul><li>px：绝对尺寸，em：应用元素上字体大小的两倍，%：相对于父元素的百分比</li><li>尽量设置相对尺寸</li><li>只有在可预知元素尺寸的情况下才使用绝对尺寸</li><li>使用em设置字体的大小</li></ul><hr><ul><li><a href="http://www.haorooms.com/post/html_meta_ds" target="_blank" rel="external">常用的meta方法</a> </li><li><a href="https://webdesign.tutsplus.com/zh-hans/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984" target="_blank" rel="external">CSS: em, rem区别</a></li><li><a href="http://ued.ctrip.com/blog/script-defer-and-async.html" target="_blank" rel="external">script的defer和async</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;代码符合标准&quot;&gt;&lt;a href=&quot;#代码符合标准&quot; class=&quot;headerlink&quot; title=&quot;代码符合标准&quot;&gt;&lt;/a&gt;代码符合标准&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;标准的页面会保证正确的渲染&lt;/li&gt;
&lt;li&gt;页面容易被搜索引擎搜索，提高搜索排名(SEO)&lt;/
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web最佳实践阅读总结(1)</title>
    <link href="http://smilesoul.cn/2017/10/05/Web%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93-1/"/>
    <id>http://smilesoul.cn/2017/10/05/Web最佳实践阅读总结-1/</id>
    <published>2017-10-05T15:11:42.000Z</published>
    <updated>2017-10-08T06:49:01.090Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://badge.juejin.im/entry/59d9c9dcf265da06456da777/likes.svg?style=flat-square" alt=""></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>最近开始刷一些书和题,此系列是介绍在读<code>Web最佳实践</code>的一些收获和体会。</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://ou42j47mq.bkt.clouddn.com/2017-10-05-webbest.jpg" alt=""></h2><h5 id="web前端发展现状"><a href="#web前端发展现状" class="headerlink" title="web前端发展现状"></a>web前端发展现状</h5><ul><li>存在问题：<ul><li>代码组织混乱</li><li>代码格式的问题突出</li><li>页面布局随意</li><li>网站整体性能差，没有意识到应用诸如缓存，动态加载，脚本压缩，图片压缩等提高性能技术</li></ul></li><li>推荐做法：<ul><li>压缩样式表和脚本文件</li><li>减少HTTP请求次数</li><li>简洁和符合W3C标准的HTML和CSS代码能减少浏览器解析的时间，加快渲染过程</li><li>页面请求数量越少，相对页面的加载速度更快</li><li>在JS代码中选择性能更好的实现方案，如延迟加载，动态加载等技术;</li></ul></li><li><p>延迟加载</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span> <span class="attr">src</span>=<span class="string">”</span>" <span class="attr">id</span>=<span class="string">”my”</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">”text/javascript”</span>&gt;</span><span class="undefined"> </span></div><div class="line"><span class="actionscript">setTimeout(“document.getElementById(‘my<span class="string">').src='</span><span class="meta"><span class="meta-keyword">include</span>/php100.php';</span> “,<span class="number">3000</span>);<span class="comment">//延时3秒 </span></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>最后加载</p><ul><li>引入外部js脚本文件时，如果放入html的head中,则页面加载前该js脚本就会被加载入页面，而放入body中，则会按照页面从上倒下的加载顺序来运行javascript的代码，所以可以把js外部引入的文件放到页面底部，来让js最后引入，从而加快页面加载速度</li></ul></li><li>动态加载 <figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    </div><div class="line">&lt;scrī<span class="keyword">pt</span> src=<span class="string">''</span> id=<span class="string">"s1"</span>&gt;&lt;/scrī<span class="keyword">pt</span>&gt; </div><div class="line">&lt;scrī<span class="keyword">pt</span> <span class="keyword">language</span>=<span class="string">"javascrīpt"</span>&gt; </div><div class="line">s1.src=<span class="string">"test.js"</span> </div><div class="line">&lt;/scrī<span class="keyword">pt</span>&gt;</div></pre></td></tr></table></figure></li></ul><h5 id="前端代码重构"><a href="#前端代码重构" class="headerlink" title="前端代码重构"></a>前端代码重构</h5><ul><li>删除无用代码，精简代码（不起作用的CSS样式和废弃的JavaScript函数）</li><li>前端代码规范化，把CSS代码放到独立的文件中，在JS定义局部变量，把部分全局变量改变成局部变量</li><li>前端代码模块化，引入面向对象的思想来重构JavaScript代码，进一步明确公有接口和私有接口</li><li>提高页面性能：<ul><li>将部分不影响首页展示的JS文件延迟到页面的加载后加载</li><li>删除页面中初始隐藏的区域，改为通过JS按需动态生成</li><li>页面中的部分图片延迟加载</li><li>调整CSS和JS文件引用顺序，即CSS在前，JS在后</li><li>给静态文件设置缓存，使用CSS Sprite，合并背景图</li><li>合并和压缩发布后的CSS和JS代码模块</li></ul></li><li>前端重构最佳实践<ul><li>重构前一定要预测风险，最好先完善自动化测试代码</li><li>重构的目的和范围要明确，提高代码的可维护性，可读性和性能</li><li>最好先易后难，循序渐进。先修改诸如命名，格式等不涉及具体逻辑的内容</li><li>重构过程中要持续测试，在多个浏览器测试，确保重构的部分功能正确。切记大量重构后再进行测试，因为大量重构后基本很难记得重构的逻辑，也可能遗漏部分测试用例</li><li>性能提升，先进行检测网站的整体性能并量化，找出性能瓶颈。重构过程中要持续监控性能，并进行对比<h5 id="前端框架的使用"><a href="#前端框架的使用" class="headerlink" title="前端框架的使用"></a>前端框架的使用</h5></li></ul></li><li>项目需求<ul><li>调查项目是否需要AJAX操作</li><li>是否需要模块化</li><li>数据传输格式JSON或者XML</li><li>需要支持的浏览器</li><li>移动还是普通网站</li><li>需要的UI模块（模态窗口，滑块控件，进度条，提示框，分割框，幻灯显示，自动填充）</li></ul></li><li>项目的特点</li><li>框架的特点<h5 id="代码质量"><a href="#代码质量" class="headerlink" title="代码质量"></a>代码质量</h5></li><li>编写高质量，标准的HTML（标准校验工具，ESLint, Flow, JSDoc, ts）</li><li>明确浏览器支持范围<ul><li>Chrome和Safari  IE Tester（IE兼容测试工具</li></ul></li><li>避免浏览器兼容性的问题<ul><li>先考虑更改方案，使用没有兼容问题的代码</li><li>考虑如何兼容的问题</li><li>兼容IE，使用IE特有的条件表达式(hack)</li><li>让兼容的代码独立，提高代码的可维护性</li></ul></li><li>HTML5新特性<ul><li>新标签的兼容，CSS3的兼容，新增的API（使用html5shiv框架）</li><li>CSS3本身不支持，会直接忽略</li><li>新增加的接口的使用，必须添加条件判断（Modernizr）</li><li>多看Can I use<h5 id="web性能分析"><a href="#web性能分析" class="headerlink" title="web性能分析"></a>web性能分析</h5></li></ul></li><li>YSlow，pagespeed<ul><li>基于不同的规则评定网站整体性能评分</li><li>给出提高网页性能的建议</li><li>统计页面加载的组件</li><li>页面的统计信息视图</li><li>相关性能分析工具集：Smush.it</li></ul></li><li>Chrome开发工具<ul><li>Network中可以查看各资源请求和下载所用的时间</li><li>Timeline可以查看网页渲染和交互过程中个步骤所花费的时间，从资源到JS的解析执行，样式的应用和绘制</li><li>Profiles中可以查看网页的CPU及内存占有情况报告</li><li>Audits中提供了各种资源和配置优化的建议和未使用CSS规则的列表</li></ul></li><li>加快代码和资源文件传输的方式<ul><li>CDN分发</li><li>缓存(meta)</li><li>压缩代码和资源文件（最优）</li><li>Gzip算法（压缩，header可以检查是否开启）</li><li>JS压缩（UglifyJS压缩和优化，YUI Compressor 仅压缩，Closure Compiler压缩和优化）</li><li>CSS(CSS Compressor,YUI Compressor)</li><li>HTML(HtmlCompressor使用时仔细调查和测试，避免压缩工具和破坏)</li><li>图片资源压缩（TinyPNG，JPEGmini，ImageOptim)</li></ul></li></ul><hr><ul><li>Airbnb规范: <a href="https://github.com/airbnb/javascript" target="_blank" rel="external">https://github.com/airbnb/javascript</a></li><li>Eslint规范: <a href="https://eslint.org/docs/rules/" target="_blank" rel="external">https://eslint.org/docs/rules/</a></li><li>Beachmark.js性能测试: <a href="https://benchmarkjs.com/docs#toc" target="_blank" rel="external">https://benchmarkjs.com/docs#toc</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://badge.juejin.im/entry/59d9c9dcf265da06456da777/likes.svg?style=flat-square&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Lodash相关技巧</title>
    <link href="http://smilesoul.cn/2017/09/29/%E5%8F%98%E9%87%8F%E5%92%8C%E6%96%B9%E6%B3%95/"/>
    <id>http://smilesoul.cn/2017/09/29/变量和方法/</id>
    <published>2017-09-29T13:55:13.000Z</published>
    <updated>2017-10-08T06:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量和方法"><a href="#变量和方法" class="headerlink" title="变量和方法"></a>变量和方法</h3><hr><h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4><ul><li>js的变量中只用primitive类型和object类型</li><li><p>平时使用的字符串应该是primitive类型，应该是not an object and has no methods</p> <figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="built_in">str</span> = <span class="string">'hello'</span>;</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.charAt(<span class="number">0</span>));</div><div class="line"><span class="comment">// output: h</span></div><div class="line"><span class="keyword">Object</span>.prototype.toString.call(<span class="built_in">str</span>)</div><div class="line"><span class="comment">// output: [object String]</span></div></pre></td></tr></table></figure></li><li><p>出现这样的情况，因为str.charAt时候，String(primitive)转换成了String(object)类型在<a href="http://www.ecma-international.org/ecma-262/5.1/#sec-8.7" target="_blank" rel="external">ECMAScript Language Specification&amp;8.7.1</a> 明确指出变量类型的转换</p></li><li>所以primitive类型的value是immutable的，而variable是mutable的，对与primitive类型的变量，为其赋值，本质上就是让变量指向新的内存。</li></ul><hr><h4 id="lodash相关技巧和实例"><a href="#lodash相关技巧和实例" class="headerlink" title="lodash相关技巧和实例"></a>lodash相关技巧和实例</h4><ul><li><p>N次循环技巧</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">Array</span>.apply(<span class="literal">null</span>, <span class="built_in">Array</span>(<span class="number">5</span>)).forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    &#125;);</div><div class="line">_.times(<span class="number">5</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    &#125;;</div></pre></td></tr></table></figure></li><li><p>深层次查找属性</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   const ownerArr = [&#123;</div><div class="line"><span class="string">"owner"</span>: <span class="string">"Colin"</span>,</div><div class="line"> <span class="string">"pets"</span>: [&#123;<span class="string">"name"</span>:<span class="string">"dog1"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"dog2"</span>&#125;]</div><div class="line">   &#125;, &#123;</div><div class="line">       <span class="string">"owner"</span>: <span class="string">"John"</span>,</div><div class="line">       <span class="string">"pets"</span>: [&#123;<span class="string">"name"</span>:<span class="string">"dog3"</span>&#125;, &#123;<span class="string">"name"</span>: <span class="string">"dog4"</span>&#125;]</div><div class="line">   &#125;];</div><div class="line"></div><div class="line">   ownerArr.<span class="keyword">map</span>(owner =&gt; &#123;</div><div class="line">       return owner.pets[<span class="number">0</span>].name;</div><div class="line">       &#125;);</div><div class="line"></div><div class="line">   <span class="number">_</span>.<span class="keyword">map</span>(ownerArr, <span class="string">'pets[0].name'</span>);</div></pre></td></tr></table></figure></li></ul><ul><li><p>数组独立</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span>.apply(<span class="literal">null</span>, <span class="keyword">Array</span>(<span class="number">6</span>)).map( (item, index) =&gt; &#123;</div><div class="line"><span class="keyword">return</span> <span class="string">"ball_"</span> + index;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="literal">_</span>.times(<span class="number">6</span>, <span class="literal">_</span>.uniqueId.bind(<span class="literal">null</span>, <span class="string">'ball_'</span>));</div><div class="line"></div><div class="line"><span class="literal">_</span>.times(<span class="number">6</span>, <span class="literal">_</span>.partial(<span class="literal">_</span>.uniqueId, <span class="string">'ball_'</span>));</div><div class="line"><span class="comment">// output: [ball_0, ball_1, ball_2, ball_3, ball_4, ball_5]</span></div></pre></td></tr></table></figure></li><li><p>对象扩展(可以直接用Object.assgin(), 底层一样的实现）</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">     Object.prototype.extend = obj =&gt; &#123;</div><div class="line"><span class="keyword">for</span> (let i <span class="keyword">in</span> obj) &#123;</div><div class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</div><div class="line">    this[i] = obj[i]<span class="comment">;</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&#125;<span class="comment">;</span></div><div class="line">    <span class="keyword">const</span> objA = &#123;<span class="string">"name"</span>: <span class="string">"colin"</span>, <span class="string">"car"</span>: <span class="string">"suzuki"</span>&#125;<span class="comment">;</span></div><div class="line">    <span class="keyword">const</span> objB = &#123;<span class="string">"name"</span>: <span class="string">"james"</span>, <span class="string">"age"</span>: <span class="number">17</span>&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">    objA.extend(objB)<span class="comment">;</span></div><div class="line">    console.<span class="built_in">log</span>(objA)<span class="comment">; </span></div><div class="line">    // &#123;<span class="string">"name"</span>: <span class="string">"james"</span>, <span class="string">"age"</span>: <span class="number">17</span>, <span class="string">"car"</span>: <span class="string">"suzuki"</span>&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">    _.<span class="built_in">assign</span>(objA, objB)<span class="comment">;</span></div><div class="line">    // &#123;<span class="string">"name"</span>: <span class="string">"james"</span>, <span class="string">"age"</span>: <span class="number">17</span>, <span class="string">"car"</span>: <span class="string">"suzuki"</span>&#125;<span class="comment">;</span></div><div class="line"></div><div class="line">    // ES6</div><div class="line">    Objetct.<span class="built_in">assign</span>(&#123;&#125;, objA, objB)<span class="comment">;</span></div><div class="line">    // &#123;<span class="string">"name"</span>: <span class="string">"james"</span>, <span class="string">"age"</span>: <span class="number">17</span>, <span class="string">"car"</span>: <span class="string">"suzuki"</span>&#125;<span class="comment">;</span></div><div class="line">    //_.<span class="built_in">assign</span> 是浅拷贝，所以会覆盖name</div></pre></td></tr></table></figure></li><li><p>补充作用域：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">test</span> = '1';</div><div class="line">testOne() &#123;</div><div class="line">    <span class="keyword">return</span> testTwo&#123;</div><div class="line">        cosole.<span class="built_in">log</span>(<span class="keyword">test</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">test</span> = '2';</div><div class="line">&#125;</div><div class="line">testOne()();</div><div class="line"><span class="comment">// output: undefined </span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">test</span> = '1';</div><div class="line">testOne() &#123;</div><div class="line">    <span class="keyword">return</span> testTwo&#123;</div><div class="line">        console.<span class="built_in">log</span>(<span class="keyword">test</span>);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">test</span> = '2';</div><div class="line">&#125;</div><div class="line"><span class="comment">// output: 1;</span></div></pre></td></tr></table></figure><p>因为重新定义了const，他在搜索作用域时候，会自上到下搜索<strong>声明</strong>的变量，如果没有声明，查找才会进去下一层，此处输出undefined，因为在testOne（）里面const之前就使用了test，所以就输出了undefined,而在第二个例子里面没有声明test，所以他就跳转出去，去下一层寻找test，即输出为1</p><ul><li>作用域提升</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line">b()&#123;</div><div class="line">    <span class="keyword">const</span> a = b = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line">console.<span class="built_in">log</span>(a, b);</div><div class="line"><span class="comment">// 抛出异常，因为ｂ没有定义</span></div><div class="line"></div><div class="line">b();</div><div class="line">console.<span class="built_in">log</span>(a, b);</div><div class="line"><span class="comment">//output: 1,2;</span></div><div class="line"><span class="comment">// const a = b = 2 等价于　在全局声明const b = 2; 内部声明const a = b;因为=运算符是重右像左运算的</span></div></pre></td></tr></table></figure></li></ul><hr><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><ul><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Primitive" target="_blank" rel="external">MDN连接文档</a></li><li><a href="http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting" target="_blank" rel="external">lodash相关技巧</a></li><li><a href="https://www.sitepoint.com/lodash-features-replace-es6/" target="_blank" rel="external">10个ES6可以代替lodash的方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;变量和方法&quot;&gt;&lt;a href=&quot;#变量和方法&quot; class=&quot;headerlink&quot; title=&quot;变量和方法&quot;&gt;&lt;/a&gt;变量和方法&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Object</title>
    <link href="http://smilesoul.cn/2017/09/29/object/"/>
    <id>http://smilesoul.cn/2017/09/29/object/</id>
    <published>2017-09-29T13:52:18.000Z</published>
    <updated>2017-09-29T13:54:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Object属性："><a href="#Object属性：" class="headerlink" title="Object属性："></a>Object属性：</h3><hr><ol><li>configurable: true<ul><li>能否用delete删除属性</li><li>能否修改属性的特性</li><li>能否把属性修改为访问器属性</li></ul></li><li>enumerable: true<ul><li>能否用for-in循环返回属性（是否可枚举）</li></ul></li><li>writable：true<ul><li>能否修改属性的值</li></ul></li><li>value：undefined<ul><li>包含这个属性的数据</li></ul></li><li><p>Object.defineProperty(obj, ‘name’, {}) (ES5)</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">Object.defineProperty(obj,</span> <span class="string">'key'</span><span class="string">,</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">configurable:</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">writable:</span> <span class="literal">false</span><span class="string">,</span></div><div class="line"><span class="attr">value:</span> <span class="string">'static'</span></div><div class="line"><span class="string">&#125;);</span></div></pre></td></tr></table></figure></li><li><p>Object.defineProperty(obj, {})</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="string">const</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">&#123;&#125;;</span></div><div class="line"><span class="string">Object.defineProperties(obj,</span> <span class="string">&#123;</span></div><div class="line"><span class="string">"property1"</span><span class="string">:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">value:</span> <span class="literal">true</span><span class="string">,</span></div><div class="line"><span class="attr">writable:</span> <span class="literal">true</span></div><div class="line"><span class="string">&#125;,</span></div><div class="line"><span class="string">"property2"</span><span class="string">:</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">value:</span> <span class="string">"Hello"</span><span class="string">,</span></div><div class="line"><span class="attr">writable:</span> <span class="literal">false</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;);</span></div><div class="line"></div><div class="line"><span class="string">cosnt</span> <span class="string">obj</span> <span class="string">=</span> <span class="string">&#123;&#125;;</span></div><div class="line"><span class="string">Object.defineProperty(obj,</span> <span class="string">'key'</span><span class="string">,</span> <span class="string">&#123;&#125;);</span></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(obj,</span> <span class="string">'key'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">Object</span> <span class="string">&#123;</span></div><div class="line"><span class="attr">value:</span> <span class="string">undefined,</span> </div><div class="line"><span class="attr">writable:</span> <span class="literal">false</span><span class="string">,</span> </div><div class="line"><span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span> </div><div class="line"><span class="attr">configurable:</span> <span class="literal">false</span><span class="string">&#125;</span></div><div class="line"></div><div class="line"><span class="string">//</span> <span class="string">注意：在这样定义时候，非定义的configurable等为false</span></div><div class="line"><span class="string">obj.name</span> <span class="string">=</span> <span class="string">'lty'</span><span class="string">;</span></div><div class="line"><span class="string">//这样定义的时候，configurable等才为true</span></div></pre></td></tr></table></figure></li><li><p>一旦把configurable设为false，就不能设回成true，即一切配置都不可使用。</p></li></ol><hr><h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><ol><li>configurable: true<ul><li>能否用delete删除属性</li><li>能否修改属性的特性</li><li>能否把属性修改为访问器属性</li></ul></li><li>enumerable: true<ul><li>能否用for-in循环返回属性（是否可枚举）</li></ul></li><li>get: undefined<ul><li>读取数据时候调用</li></ul></li><li>set：undefined<ul><li>写入属性时候调用</li></ul></li><li>访问器属性不能直接定义，只能使用Object.defineProperty()来定义</li><li><p>因为 primitive 是 immutable 的,所以赋值分配新的内存,即为写入</p> <figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> book = &#123;</div><div class="line">_year: <span class="number">2004</span>,</div><div class="line">edition: <span class="number">1</span>,</div><div class="line">&#125;</div><div class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">'year'</span>, &#123;</div><div class="line"><span class="keyword">get</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>._year,</div><div class="line"><span class="keyword">set</span>: <span class="function"><span class="params">newline</span> =&gt;</span> &#123;</div><div class="line"><span class="keyword">if</span>(newline &gt; <span class="number">2000</span>) &#123;</div><div class="line"><span class="keyword">this</span>._year = newline;</div><div class="line"><span class="keyword">this</span>.edition += <span class="number">1</span>;</div><div class="line">&#125;;</div><div class="line">&#125;,</div><div class="line">&#125;)</div><div class="line">book.year = <span class="number">2005</span>;</div><div class="line"><span class="built_in">console</span>.log(edition);</div><div class="line"><span class="comment">// output: 2</span></div></pre></td></tr></table></figure></li><li><p>浏览器中一般是使用<em>defineGetter</em>和<em>defineSetter</em>来代替    </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Object属性：&quot;&gt;&lt;a href=&quot;#Object属性：&quot; class=&quot;headerlink&quot; title=&quot;Object属性：&quot;&gt;&lt;/a&gt;Object属性：&lt;/h3&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;configurable: true&lt;ul&gt;
&lt;li&gt;能否用d
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>个人插件</title>
    <link href="http://smilesoul.cn/2017/09/29/%E4%B8%AA%E4%BA%BA%E6%8F%92%E4%BB%B6/"/>
    <id>http://smilesoul.cn/2017/09/29/个人插件/</id>
    <published>2017-09-29T07:13:25.000Z</published>
    <updated>2017-09-29T08:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Alfred的相关插件"><a href="#Alfred的相关插件" class="headerlink" title="Alfred的相关插件"></a>Alfred的相关插件</h3><hr><ul><li>AboutThisMac: 列出系统相关配置信息</li><li>colors: 前端选取颜色列表，查询颜色rgb,hsl值等</li><li>Hash: 文件hash加密</li><li>KD: 快递快速查询</li><li>npm: npmio快速查询</li><li>RMB: 人民币数汉转换</li><li>shanbay: 扇贝中英文翻译</li><li>StackOverflow: stackoverflow快速查询</li><li>YD: 有道词典中英文翻译</li><li>YDI: 有道词典加强中英文翻译</li></ul><hr><h3 id="Chrome的相关插件"><a href="#Chrome的相关插件" class="headerlink" title="Chrome的相关插件"></a>Chrome的相关插件</h3><hr><ul><li>1Password: 密码管理</li><li>Advanced REST client: 正则表达式</li><li>Checker Plus for Gmail: Gmail邮箱</li><li>Chrono Download Manager: 下载器</li><li>Hide Files on GitHub: 隐藏Github的所有只有扩展名文件</li><li>History Trends: chrome历史浏览记录</li><li>IcoMoon: icoMoon网站</li><li>Insight.io for Github: github的tree推荐</li><li>Isometric Contributions: github的commit大楼</li><li>JavaScript Errors Notifier: JavaScript的浏览器报错</li><li>JSON Formatter: JSON格式自动切换</li><li>OneTab: 所有Tab页面集合一个Tab页面</li><li>OctoLinker: github代码包连接跳转</li><li>npmhub: npmhub包自动跳转</li><li>Pocket: plan记录</li><li>Postman: api请求测试</li><li>Proxy SwitchyOmega: 翻墙代理必备</li><li>Quick Javascript Switcher: 快速关闭JavaScript脚本使用</li><li>Scratch JS: 浏览器内置coderunnner</li><li>Speedtest by Ookla: 网页测速</li><li>Tampermonkey: 插件大合集搜索网站,可查找需要的插件</li><li>The Great Suspender: 自动挂载长期未使用的页面，节省内存空间</li><li>Vimium: 网页版vim</li><li>WhatFont: 查看当前网页标签内字体</li><li>ZenHub for GitHub: Github中的board</li></ul><hr><h3 id="VScode-插件合集"><a href="#VScode-插件合集" class="headerlink" title="VScode 插件合集"></a>VScode 插件合集</h3><hr><ul><li>Auto Rename Tag: HTML自动修改标签</li><li>Auto-Open Markdwon Preview: 编写markdown必备，自动开启Preview模式</li><li>AutoFileName: 文件名字自动提示</li><li>Can I Use: CSS兼容性显示</li><li>Code Runner: 代码运行环境</li><li>Color Hightlight: 颜色自动显色</li><li>Docker: Docker管理</li><li>Document this: 自动添加注释</li><li>EditorConfig for VSCode: 文件格式自动整理</li><li>Git History: git log记录查看</li><li>Git lens: 代码编写提交历史查看</li><li>JavaScript code snippets: JavaScript的snippets</li><li>kubernetes Support: kubernetes的配置文件</li><li>Nodejs Modules Intellisense: node内置模块包提示</li><li>npm: npm包的提示操作，记录哪些包未使用或者未安装</li><li>npm Dependency: 可自动更新npm包的相关版本</li><li>Project Manager: 项目管理</li><li>Setting Sync: 插件同步管理</li><li>vscode-icons: vscode的Icon图标</li></ul><hr><ul><li>希望各位大佬来补充，相互交流，扩充插件库</li></ul><ul><li>Github地址: <a href="https://github.com/smile-soul" target="_blank" rel="external">https://github.com/smile-soul</a></li><li>个人Blog: <a href="http://www.smilesoul.cn/" target="_blank" rel="external">http://www.smilesoul.cn/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Alfred的相关插件&quot;&gt;&lt;a href=&quot;#Alfred的相关插件&quot; class=&quot;headerlink&quot; title=&quot;Alfred的相关插件&quot;&gt;&lt;/a&gt;Alfred的相关插件&lt;/h3&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;AboutThisMac: 列出系统相关配置信
    
    </summary>
    
      <category term="开发工具" scheme="http://smilesoul.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="tools" scheme="http://smilesoul.cn/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>前端构建工具介绍</title>
    <link href="http://smilesoul.cn/2017/08/07/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>http://smilesoul.cn/2017/08/07/前端构建工具介绍/</id>
    <published>2017-08-07T11:50:25.000Z</published>
    <updated>2017-09-29T13:49:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Grunt-and-Gulp-构建工具"><a href="#Grunt-and-Gulp-构建工具" class="headerlink" title="Grunt and Gulp(构建工具)"></a>Grunt and Gulp(构建工具)</h3><hr><h4 id="两者优缺点对比"><a href="#两者优缺点对比" class="headerlink" title="两者优缺点对比"></a>两者优缺点对比</h4><ol><li>Grunt 有一个完善的社区，插件丰富. 它简单易学。（大约4000+，将近Gulp两倍);</li><li>Grunt 是基于文件流，Gulp是基于管道流。</li><li>Grunt 的缺点<ul><li>但插件很难遵守单一责任原则。比如说要对处理后的文件进行更名操作，你可能使用的是 uglify 插件，也有可能使用的是 concat 插件（取决于工作流的最后一个环节是谁）。对很多人来说 Grunt 插件多少存在“职责不明”和“越俎代庖”的情况。在个人看来，这也是 Grunt 一个设计思想：把对文件的操作抽象为一个独立的组（Files），任何插件都以相同的规则来使用它。遗憾在于，使用它的过程发生在每个插件的独立配置对象里，所以总给人一种“把不该这个插件做的事情丢给它来做”的别扭感觉。</li><li>用插件做一些本来不需要插件来做的事情。因为 Grunt 提供了统一的 CLI 入口，子任务由插件定义，由 CLI 命令来调用执行，因此哪怕是很简单的外部命令（比如说运行 karma start）都得有一个插件来负责封装它，然后再变成 Grunt CLI 命令的参数来运行，多此一举。</li><li>试图用配置文件完成所有事，结果就是混乱不堪。规模较大，构建／分发／部署流程较为复杂的项目，其 Gruntfile有多庞杂相信有经历的人都有所体会。而 gulp.js 奉行的是“写程序而不是写配置”。 </li><li>落后的流程控制产生了让人头痛的临时文件／文件夹所导致的性能滞后。</li></ul></li></ol><p>Gruntfile.js范例<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">module.exports = <span class="keyword">function</span>(grunt) &#123;</div><div class="line">    grunt.initConfig(&#123;</div><div class="line">        concat: &#123;</div><div class="line">            <span class="string">'dist/all.js'</span>: [<span class="string">'src/*.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        uglify: &#123;</div><div class="line">            <span class="string">'dist/all.min.js'</span>: [<span class="string">'dist/all.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        jshint: &#123;</div><div class="line">            files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>]</div><div class="line">        &#125;,</div><div class="line">        watch: &#123;</div><div class="line">            files: [<span class="string">'gruntfile.js'</span>, <span class="string">'src/*.js'</span>],</div><div class="line">            tasks: [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    // Load Our Plugins</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-jshint'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-concat'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">    // Register Default Task</div><div class="line">    grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>Gulpfile.js范例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">const</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">const</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">const</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">const</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line">  </div><div class="line"><span class="comment">// 语法检查</span></div><div class="line">gulp.task(<span class="string">'jshint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 合并文件之后压缩代码</span></div><div class="line">gulp.task(<span class="string">'minify'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> gulp.src(<span class="string">'src/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>));</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 监视文件的变化</span></div><div class="line">gulp.task(<span class="string">'watch'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/*.js'</span>, [<span class="string">'jshint'</span>, <span class="string">'minify'</span>]);</div><div class="line">&#125;);</div><div class="line">  </div><div class="line"><span class="comment">// 注册缺省任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'minify'</span>, <span class="string">'watch'</span>]);</div></pre></td></tr></table></figure></p><p>附录</p><ul><li>Gulp插件库: <a href="http://gulpjs.com/plugins" target="_blank" rel="external">http://gulpjs.com/plugins</a></li><li>Gulp API: <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md" target="_blank" rel="external">https://github.com/gulpjs/gulp/blob/master/docs/API.md</a></li><li>Grunt API: <a href="https://gruntjs.com/api/grunt" target="_blank" rel="external">https://gruntjs.com/api/grunt</a></li></ul><h3 id="Browserify-and-Webpack-模块化工具"><a href="#Browserify-and-Webpack-模块化工具" class="headerlink" title="Browserify and Webpack(模块化工具)"></a>Browserify and Webpack(模块化工具)</h3><ol><li>seajs / requirejs : 是一种在线”编译” 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module , 也就实现了模块化。</li><li>browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。以webpack为例。首先它是预编译的，不需要在浏览器中加载解释器。它也是基于文件流的，相较于WebPack，Browserify能够对处理过程做更精细的控制，而WebPack相对更加‘黑盒’。还有就是WebPack的生态要比Browserify好得多。</li></ol><h3 id="Npm-yarn-bower"><a href="#Npm-yarn-bower" class="headerlink" title="Npm, yarn, bower"></a>Npm, yarn, bower</h3><ol><li>npm安装依赖包的时候，会将包的不同版本放在合适的地方，从而，可以在想要的地方加载想要的版本。但是，这样对于前端来说，就是噩梦了(比如有两个版本的jQuery，或者两个版本的Bootstrap)。</li><li>npm是为JavaScript服务的包管理器，目前的仓库中大多数都是Node.js包，使用Browserify进行适配之后，某些模块可以在客户端运行，但还有很多仍然不行。</li><li>npm会创建一个树形的依赖关系，而bower创建的是扁平化的层级依赖关系。</li><li>树形的依赖关系的意思就是每一个包都可以有他自己的依赖包。在服务器上，这样做很好，并不用太关心空间不够用什么的。但是，在前端，这样就显得很不友好了，想象一下一个网站同时加载了三个不同版本的jQuery。</li><li>bower安装的目录结构是扁平的。相互依赖的包会被放到同一级目录下。由于目录扁平化，所以，发生版本冲突的时候，需要人工解决。这样，任何人得到这个项目，安装的包的版本都是相同的了。</li></ol><h3 id="Yeoman"><a href="#Yeoman" class="headerlink" title="Yeoman"></a>Yeoman</h3><ol><li>Yeoman 是一个通用的脚手架系统允许创建任何的 app 。它可以迅速的搭建一个新项目，并且能够简化了现有项目的维护。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Grunt-and-Gulp-构建工具&quot;&gt;&lt;a href=&quot;#Grunt-and-Gulp-构建工具&quot; class=&quot;headerlink&quot; title=&quot;Grunt and Gulp(构建工具)&quot;&gt;&lt;/a&gt;Grunt and Gulp(构建工具)&lt;/h3&gt;&lt;hr
    
    </summary>
    
      <category term="前端构建" scheme="http://smilesoul.cn/categories/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA/"/>
    
    
      <category term="framework" scheme="http://smilesoul.cn/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>原型函数Construction解析</title>
    <link href="http://smilesoul.cn/2017/07/06/JavaScript-constructor/"/>
    <id>http://smilesoul.cn/2017/07/06/JavaScript-constructor/</id>
    <published>2017-07-06T12:54:16.000Z</published>
    <updated>2017-10-09T05:55:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解原型之间的关系"><a href="#理解原型之间的关系" class="headerlink" title="理解原型之间的关系"></a>理解原型之间的关系</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">testOne() &#123;&#125;;</div><div class="line">testOne.prototype</div><div class="line"><span class="comment">// Object &#123;</span></div><div class="line"><span class="symbol">        constructor:</span> a()</div><div class="line"><span class="symbol">                arguments:</span> null</div><div class="line"><span class="symbol">                caller:</span> null</div><div class="line"><span class="symbol">                length:</span> <span class="number">0</span></div><div class="line"><span class="symbol">                name:</span><span class="string">"a"</span></div><div class="line"><span class="symbol">                prototype:</span> Object</div><div class="line"><span class="symbol">                __proto__:</span> ()</div><div class="line">                <span class="params">&lt;function scope&gt;</span></div><div class="line">                <span class="comment">//注意层级关系</span></div><div class="line"><span class="symbol">        __proto__:</span> Object</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">testOne.length</div><div class="line"><span class="comment">// output: 0</span></div><div class="line"></div><div class="line"></div><div class="line">testOne.prototype.name = <span class="string">'2'</span>;</div><div class="line">testOne.name</div><div class="line"><span class="comment">// output: 'a';</span></div></pre></td></tr></table></figure><p><strong>注意</strong>: 这里输出为’a’，而不是２，它会去查constructor里面的name，因为prototype.constructor是会指回testOne，如果要获取＇２＇，只能testOne.prototype.name来获取.</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> testTwo = <span class="keyword">new</span> testOne();</div><div class="line">testTwo.prototype</div><div class="line"><span class="comment">//output: undefined</span></div></pre></td></tr></table></figure><p><strong>注意</strong>: 每创建一个函数才会创建它的prototype对象，使用new，不会创建prototype对象</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="string">testTwo.constructor</span></div><div class="line"><span class="string">//output:</span> <span class="string">testOne()&#123;&#125;</span></div><div class="line"></div><div class="line"><span class="string">testTwo.constructor.name</span> <span class="string">=</span> <span class="string">'b'</span><span class="string">;</span></div><div class="line"><span class="string">testTwo.name</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">testTwo</span></div><div class="line"></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(ｔｅｓｔTwo,</span> <span class="string">'name'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;value:</span> <span class="string">"testTwo"</span><span class="string">,</span> <span class="attr">writable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>所有原声的只可以delete，之后testOne.name输出为＇＇，不能修改.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">testTwo.constructor.names</span> <span class="string">=</span> <span class="string">'c'</span><span class="string">;</span></div><div class="line"><span class="string">testTwo.names</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">c</span></div><div class="line"></div><div class="line"><span class="string">Object,getOwnPropertyDescriptor(testTwo,</span> <span class="string">'names'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;value:</span> <span class="string">"c"</span><span class="string">,</span> <span class="attr">writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>非原生的属性，添加之后可以修改,所以在执行new操作时，将tetTwo的指针指向了testTwo.constructor</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">testOne.prototype.newOne = <span class="string">'5'</span>;</div><div class="line">testTwo.newOne</div><div class="line"><span class="comment">// output: '5'</span></div><div class="line">testTwo.newOne = <span class="string">'6'</span>;</div><div class="line">testTwo.newOne</div><div class="line"><span class="comment">// output: '6'</span></div><div class="line">testTwo</div><div class="line"><span class="comment">// output: </span></div><div class="line"><span class="symbol">    bbb:</span><span class="string">"444"</span></div><div class="line"><span class="symbol">    __proto__:</span>Object</div><div class="line"><span class="symbol">        bbb:</span> <span class="string">"2"</span></div><div class="line"><span class="symbol">        constructor:</span> d()</div><div class="line">        ＿_proto__: Object</div></pre></td></tr></table></figure><p>newOne　屏蔽掉了原属性，因为将怎么testOne的指针指＿proto＿</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Object.keys(testTwo);</div><div class="line"><span class="regexp">//</span> output: [<span class="string">'bbb'</span>]</div></pre></td></tr></table></figure><p>这也是为什么Object.keys只出现bbb，因为＿proto＿，constructor不可枚举.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">name</span>()<span class="comment">&#123;&#125;</span>;</div><div class="line"><span class="keyword">name</span>.prototype;</div><div class="line"><span class="comment">// output: constructor: name()</span></div><div class="line">            __proto__:<span class="keyword">Object</span>               </div><div class="line"><span class="keyword">const</span> nameTwo()<span class="comment">&#123;&#125;</span>;</div><div class="line">nameTwo.prototype = <span class="comment">&#123;&#125;</span>;</div><div class="line">nameTwo.prototype;</div><div class="line"><span class="comment">// output: __proto__:Object</span></div></pre></td></tr></table></figure><p>这也切断了与原型之间的联系，constructor变成了＿ｐｒｏｔｏ＿的属性</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="string">const</span> <span class="string">nameThree()&#123;&#125;;</span></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(nameThree.prototype,</span> <span class="string">'constructor'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;</span> <span class="attr">writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">false</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span> <span class="string">&#125;</span></div><div class="line"><span class="string">nameThree.prototype</span> <span class="string">=</span> <span class="string">&#123;</span> <span class="attr">constructor:</span> <span class="string">nameThree&#125;;</span></div><div class="line"><span class="string">Object.getOwnPropertyDescriptor(nameThree.prototype,</span> <span class="string">'constructor'</span><span class="string">);</span></div><div class="line"><span class="string">//</span> <span class="attr">output:</span> <span class="string">&#123;writable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">enumerable:</span> <span class="literal">true</span><span class="string">,</span> <span class="attr">configurable:</span> <span class="literal">true</span><span class="string">&#125;</span></div></pre></td></tr></table></figure><p>操作prototype会使，constructor消失，如果手动改变，这会使constructor种的enumerable变成true（即可枚举）    </p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;理解原型之间的关系&quot;&gt;&lt;a href=&quot;#理解原型之间的关系&quot; class=&quot;headerlink&quot; title=&quot;理解原型之间的关系&quot;&gt;&lt;/a&gt;理解原型之间的关系&lt;/h3&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="编程语言" scheme="http://smilesoul.cn/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://smilesoul.cn/tags/JavaScript/"/>
    
  </entry>
  
</feed>
